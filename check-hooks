#!/usr/bin/env perl

=for oauth2

HTTP/1.1 201 Created
Server: nginx/1.0.13
Date: Wed, 18 Apr 2012 13:26:57 GMT
Content-Type: application/json; charset=utf-8
Connection: keep-alive
Status: 201 Created
X-RateLimit-Limit: 5000
ETag: "ae648e7cc24aa543eee65e405461b70e"
Location: https://api.github.com/authorizations/313682
X-RateLimit-Remaining: 4996
Content-Length: 415

{
  "scopes": [
    "repo"
  ],
  "created_at": "2012-04-18T13:26:57Z",
  "note_url": null,
  "token": "b733b515c461114e8ea55e084acb065ec27cc509",
  "app": {
    "url": "http://developer.github.com/v3/oauth/#oauth-authorizations-api",
    "name": "nagios checks (API)"
  },
  "url": "https://api.github.com/authorizations/313682",
  "note": "nagios checks",
  "id": 313682,
  "updated_at": "2012-04-18T13:26:57Z"
}

=cut


use strict;
use warnings;

use GitHub::Tools::Common;
use Net::HTTP::Spore;
use Data::Dump qw/dump/;
use Try::Tiny;

use feature ':5.10';

my $g = api();
my $failed = 0;

sub hook($) {
    my $h = shift;
    my $hook = '';
    if ($h->{name} eq 'web') {
        $hook = $h->{config}->{url};
    } elsif ($h->{name} eq 'irc') {
        $hook = "irc://" . join(":", grep {$_} values %{$h->{config} });
    } else {
        warn "unsupported hook: " . $h->{name};
    }
    return $hook;
}
sub status($) {
    my $l = shift;

    return $l->{code} . ":" . $l->{message};
}
iterate_repos('startsiden', sub {
        my $r = shift;
        try {
            # XXX: OMG This is lazy exception handling! :p
            say "repo: " . $r->{name} if $ENV{DEBUG};
            my $hooks = $g->list_repo_hooks(user => 'startsiden', repo => $r->{name})->body;
            foreach my $h (@$hooks) {
                warn dump($h) if $ENV{DEBUG};
                my $last_resp = $h->{last_response};
                if ($ENV{RETEST} and $last_resp->{status} and $last_resp->{status} eq 'unused') {
                    # lets fire it and check
                    warn $r->{name} . ": rechecking, unused status";
                    my $test_res = $g->test_repo_hook(user => 'startsiden', repo => $r->{name}, id => $h->{id});
                    $h = $g->get_repo_hook(user => 'startsiden', repo => $r->{name}, id => $h->{id})->body;
                }
                if ($last_resp->{code} and $last_resp->{code} == 200) {
                    # All ok
                } elsif (!$last_resp->{code} and $last_resp->{status} ne 'unused') {
                    warn "No last_resp? " . dump($h);
                } elsif ($ENV{RETEST} and $last_resp->{code} and $last_resp->{code} != 200) {
                    # lets retry!
                    say "Restesting..." if $ENV{DEBUG};
                    my $test_res = $g->test_repo_hook(user => 'startsiden', repo => $r->{name}, id => $h->{id});
                    $h = $g->get_repo_hook(user => 'startsiden', repo => $r->{name}, id => $h->{id})->body;
                    if ($h->{last_response}->{code} != 200) {
                        my $hook = hook($h);
                        say $r->{name} . " ($hook) => " . " :: " . status($h->{last_response});
                        $failed++;
                    }
                } elsif ($last_resp->{code}) {
                    say $r->{name} . " " . hook($h) . " failed: " . status $last_resp;
                } else {
                    warn $r->{name} . " " . hook($h) . " >> no idea: " . dump($last_resp);
                }
            }
        } catch {
            warn "Error executing some callback: " . $_;
        };
    }
);

if ($failed) {
    warn "FAILED $failed repo hooks\n";
    exit(1);
}
